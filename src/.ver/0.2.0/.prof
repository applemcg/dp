source dplib
dp_version ()
{
     : link to "(or echo)" the changelog and show the Version Number
     ${*:-open} https://applemcg.github.io/shelf.html#dp_Changelog
     comment 0.2.0
}
dp_init () 
{ 
    : "bring along it's utillib";
    : date: 2022-08-20;
    source $(which dputillib)
    isfunction dp_obsolete && dp_obsolete unset
}
dp_install () 
{ 
    : move the run-time components into place;
    : date: 2022-08-20;
    local bin=$(needir $(dp_root)/bin);
    local lib=$(needir $(dp_root)/lib);
    :;
    chmod 775 ./dp{,util}lib
    :;
    ln -f ./dplib     $bin;
    ln -f ./dputillib $bin;
    :;
    ln -f ./dot.prof  $lib
}
dp_root () 
{ 
    : the development, think ~/src/... directory for source control;
    ${*:-echo} $(needir $HOME/Dropbox/marty3/git/dp)
}
dp_obsolete ()
{
    : made obsolete by separtating SRC from BITMELD runtime
    ${*:-echo} dp_{obsolete,lib,utillib} 
}
dp () 
{ 
    : do Dot Prof;
    : date: 2022-08-19;
    : date: 2022-08-20;
    set -- ./.prof;
    [[ -f $1 ]] || { 
        cp $(dp_root)/lib/dot.prof $1
    };
    isfunction backup && backup $1;
    source $1
}
dp_test () 
{ 
    : home for DP testing, "it's shaping up in the FALSE block";
    : date: 2022-08-19;
    : date: 2022-08-20;
    ${*:-echo} $(needir $(dp_root)/dp_test)
}
compare_all_lib () 
{ 
    : compare set vs lib function lists;
    dp_all | tpl > .all;
    functions ./dplib | sort > .lib;
    comm $* .all .lib;
    printf "%s\t%s\t%s\n" .all .lib BOTH
}
fun_starter () 
{ 
    : generate STDERR-directed function calls to any_INIT functions;
    : date: 2018-02-16;
    : date: 2020-03-21 ONLY echo the INIT functions on ALL;
    : date: 2022-03-17;
    debug A "$@";
    report_notfile "$1" && return 1;
    local args=$(cat "$1" |functions | grep _init$ | sort);
    debug B args $args;
    for fun in $args;
    do
        printf "%s %s 1>&2\n" eval $fun;
    done;
    debug END "$@"
}
yy () 
{ 
    isfunction $1 && echo $1
}
dp_all ()
{
    ${*:-echo} dp dp_{abstracts,all,example,funs,init,install,profs,root,test,utilities,version}
}    
false &&
{
    return;
    dp_utilities | tee $(dp_utillib)
    dp_install
    which dputillib
    backup .prof    
    ls -lisart .prof $(find . -type f | usefulfiles)       
}
on
off    
    # lib_tidy ./dplib
    # dp_install
    # source ./dplib;
    # foreach yy $(dp_all)
    def compare_all_lib
    compare_all_lib    



