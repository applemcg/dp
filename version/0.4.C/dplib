dp () 
{ 
    : do Dot Prof;
    : date: 2022-08-19;
    : date: 2022-08-22;
    : date: 2022-09-04;
    [[ -f ./.prof ]] || { 
        cp $(dp_root)/lib/dot.prof .prof
    };
    isfunction backup 2> /dev/null && backup ./.prof;
    set ${1:-./.prof};
    debug ENTRY $*;
    case $1 in 
        ./.prof)
            source $1
        ;;
        *)
            fun_asapp $* && return
        ;;
    esac
}
dp_abstracts () 
{ 
    : write the Table for DP function ABSTRACTS;
    rdb_hdr name abstract;
    foreach abstract $(dp_all)
}
dp_all () 
{ 
    : all the functions in the DP family;
    : date: 2022-08-22;
    : date: 2022-09-04;
    ${*:-echo} dp dp_{abstracts,all,diff,example,funs,init,install} dp_{profs,root,test,tolibrary,utilities,version} dp_{cblock,compareall,functions,header,libraries} dp_{restore,rmfunctions}
}
dp_example () 
{ 
    : dotprof usage examples;
    : date: 2022-08-19;
    foreach dp_funs $(dp_profs) 1>&2;
    echo . . . .;
    foreach dp_funs $(dp_profs) | field 2 | sort -u;
    echo . . . .;
    declare -f $(myname)
}
dp_funs () 
{ 
    : list all function and their Dot Prof file;
    : date: 2022-07-30;
    : date: 2022-08-19;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    functions $1 | sed "s=$=	$1="
}
dp_init () 
{ 
    : bring along its utillib;
    : date: 2022-08-20;
    : date: 2022-08-22;
    source $(which dputillib);
    isfunction dp_obsolete && dp_obsolete unset;
    dp_root
}
dp_install () 
{ 
    : move the run-time components into place;
    : versions are tracked in SRC, not in BIN, LIB;
    : date: 2022-08-20;
    : ------------------ two main components of an APPs BITMELD --;
    : date: 2022-08-27;
    : date: 2022-09-04;
    :;
    runfrom $(dp_root)/src || return;
    :;
    local bin=$(needir $(dp_root)/bin);
    local lib=$(needir $(dp_root)/lib);
    :;
    : ---------------- install Readable Information in the ROOT --;
    :;
    ln -f ./README.md $(dp_root);
    ln -f ./Changelog.md $(dp_root);
    ln -f ./ManualPage.md $(dp_root);
    ln -f ./Workflow.md $(dp_root);
    ln -f ./Versioning.md $(dp_root);
    :;
    : ---------------------------------- manufacture the dp_app --;
    :;
    dp_utilities | cat - ./dplib | onlyChanged dp_app;
    :;
    : ------------------------- install just the APP in the BIN --;
    :;
    chmod 775 ./dp_app;
    ln -f ./dp_app $bin;
    :;
    : ------------------------------- install text files in LIB --;
    ln -f ./dot.prof $lib;
    :;
    : ------------------------------------------- all installed --;
    :;
    indir $(dp_root) find . -type file | egrep -v '\.(bak|git)/'
}
dp_profs () 
{ 
    : list the active Dot-Profs;
    : date: 2022-07-30;
    : date: 2022-08-19;
    find $(home) -type f -name .prof | egrep -v '.(ver|bak)/'
}
dp_root () 
{ 
    : the development, think ~/src/... directory for source control;
    : date: 2022-08-22;
    : ${DP_ROOT:=$(needir $HOME/Dropbox/marty3/git/dp)};
    ${*:-echo} $DP_ROOT
}
dp_test () 
{ 
    : home for DP testing, "it's shaping up in the FALSE block";
    : date: 2022-08-19;
    : date: 2022-08-20;
    : date: 2022-08-22;
    ${*:-echo} $(needir $(dp_root)/dp_test)
}
dp_utilities () 
{ 
    : functions used by dplib functions;
    : date: 2022-08-20;
    declare -f $(comm -23 <(app_fun $(functions dplib) 2> /dev/null) <( dp_all| tpl))
}
dp_version () 
{ 
    : print the version;
    : the SMART way, dp_version backup_ver;
    : date: 2022-08-22;
    : date: 2022-08-27;
    : date: 2022-09-04;
    ${*:-echo} 0.4.a
}
dp_diff () 
{ 
    : diff LIB and ./.prof versions of functions;
    : lessons: ?? foreach was OK but Examine your TEST CASE, steady on DIFF ?;
    : date: 2022-08-22;
    : date: 2022-09-04;
    debug ENTRY $# $*;
    if_missingargs 2 $* && return;
    local lib=$(which $1);
    shift;
    debug LIB: $lib;
    for fun in $@;
    do
        debug FUN: $fun;
        fun_peek $fun ./.prof > .dotp;
        fun_peek $fun $lib > .dlib;
        diff .dlib .dotp || { 
            printf "RETURN $?\n< $lib\n$fun\t./.prof\n========\n\n\n"
        };
    done
}
dp_tolibrary () 
{ 
    : write dot prof functions to their primary directory;
    : date: 2022-08-25;
    local out=./funlib.out;
    for dir in $(
      do_whf $(fdp) | tee $out | nf gt 1 | field 2 | sort -u
      );
    do
        lib=$(basename $dir);
        funslib $(grep $lib $out| field 1);
    done
}
dp_compareall () 
{ 
    : compare set vs family function lists;
    : anticipates the general case;
    : date: 2022-08-22;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    local all=${1}_all;
    local fam="$1 $(sfg ${1}_)";
    debug all: $all;
    debug fam: $fam;
    report_notfunction $all && return 1;
    :;
    $all | tpl | sort > .all;
    echo $fam | tpl | sort > .fam;
    comm .all .fam;
    printf "%s\t%s\t%s\n" .all .fam BOTH
}
dp_header () 
{ 
    : collect the current Header Block from ./.prof;
    : date: 2022-09-04;
    awk -v p=1 '$2 ~ /^[(][)]$/ { exit }; p' ${1:-./.prof}
}
dp_cblock () 
{ 
    : collect the current Comment and Execution Blocks from ./.prof;
    : date: 2022-09-04;
    awk -v p=0 '$1 ~ /^false$/ { p = 1 }; p' ${1:-./.prof}
}
dp_functions () 
{ 
    : collect the functions from ./.Prof;
    : date: 2022-09-04;
    awk -v p=0 '
        $1 ~ /^false$/  { p = 0 };
	$2 ~ /^[(][)]$/ { p = 1 };
	p
    ' ${1:-./.prof} | functions
}
dp_restore () 
{ 
    : collect the ./.prof functions in these versions:;
    : .prof.now -- the current function block;
    : .prof.nxt -- current less functions removed by rmfunctions;
    : .prof.tmp -- the reconstructed .prof;
    : related: dp_rmfunctions ./.prof.tmp into a .prof.nxt;
    : date: 2022-09-04;
    :;
    function _do_restore () 
    { 
        dp_header;
        command declare -f $(dp_functions) > ./.prof.now;
        [[ -f ./.prof.nxt ]] && cat ./.prof.nxt || cat ./.prof.now;
        dp_cblock
    };
    _do_restore > ./.prof.tmp;
    chmod +x ./.prof.tmp;
    comment set -- .prof.{now,nxt,tmp}
}
dp_rmfunctions () 
{ 
    : remove the named function arguments from the collection;
    : update ./.prof.tmp;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    command declare -f $(dp_functions | rm_these $*) | tee ./.prof.nxt
}
eval dp_init 1>&2
