abstract () 
{ 
    : "show a function's abstract, present or NOT";
    : date: 2021-10-09;
    : date: 2022-04-21;
    declare -f ${1:-$(myname)} | awk '

        NR == 1  { name = $1 };
	NR == 3  {
                    abstract = $0
		    # printf "1: %s\t2:%s\t3:%s\n", $1, $2, $3
		    if ( $2 ~ /:$/)
		    {
		        # it is a TAG, so
                        abstract = ""
		    }
		    else
		    {
		        sub(/ *: "*/,"",abstract);  # trim leading :.*"
		        sub(/"*;$/,"",abstract)     # and trailing "*;
		    }
		    printf "%s\t%s\n", name, abstract
		    exit
		  }
    '
}
app_fun () 
{ 
    : recursively w/for_nomar and app_funuses, find all called functions;
    : date: 2016-11-10;
    : date: 2018-10-05 key feature set PRIOR, add NEW;
    : date: 2019-08-29;
    set $* $(for_nomar app_funuses $*);
    echo $* | wpl | sort -u
}
app_funuses () 
{ 
    : names the functions the function argument uses,;
    : omitting _ underscore names -- e.g. local functions;
    : date: 2017-08-16;
    : date: 2019-08-29;
    : date: 2019-11-16 replace foreach fun_alltype RUN fun_words $* with TYPE_WORD;
    type_word $* | awk "

        \$1 !~ /^function$/ { next; }
        \$2 !~ /^$1$/       { print \$2 }
    "
}
args_uniq () 
{ 
    : date: 2017-03-26;
    : date: 2018-10-29;
    : debug $*;
    : date: 2019-08-29;
    : date: 2022-06-23;
    awk '
    BEGIN {
	    for (i=1; i < ARGC; i++) {
                 j = ARGV[i];
                 if (!printed[j]++) {
                     printf "%s ", j;
		 }
	     }
	     printf "\n"
	  }
    ' $*
}
backup () 
{ 
    : ~ backup file ...;
    : date: 2019-12-28;
    : date: 2022-04-15;
    : date: 2022-05-29;
    [[ -f $1 ]] || fun_asapp $* && return 1;
    backup_init;
    for file in "$@";
    do
        backup_one $file;
    done
}
backup_init () 
{ 
    : default BACKUP is .bak ... directory;
    : default VERSION is .ver directory;
    : to use NON-DOT directory names, set USER_BACKUP_AREA;
    : to place in the hierarchy like "/Windows/Fileshare";
    : date: 2019-11-16;
    :;
    set -- ${BACKUP_DEFAULT:=.bak .ver};
    debug ENTRY $*;
    setenv BACKUP_DIRECTORY $1 > /dev/null;
    setenv VERSION_DIRECTORY $2 > /dev/null;
    debug DIRECTORY: $BACKUP_DIRECTORY;
    debug VERSION: $VERSION_DIRECTORY;
    pause
}
backup_one () 
{ 
    : allows backup from another directory.;
    : avoid temptation to include as opening steps in backup_here,;
    : date: 2019-12-20 -- notfile test;
    : date: 2022-04-15;
    debug ENTRY $*;
    report_notfile "${1:-/dev/null}" && return 1;
    indir $(dirname $1) backup_here $(basename $1)
}
comment () 
{ 
    : since the DECLARE -F idiom eats;
    : date: 2018-02-16;
    : date: 2021-03-24;
    : date: 2022-04-29;
    echo $* 1>&2
}
debug () 
{ 
    return
}
declare () 
{ 
    : insert ... syntactic sugar into shell functions;
    : date: 2021-01-03;
    : date: 2021-03-09 the BUG was in FUNC_ARGS;
    : date: 2021-04-14;
    : date: 2022-05-22;
    case $1 in 
        -f)
            shift;
            debug A: $#, $@;
            : test for function names;
            set -- $(func_args $@);
            debug B: $#, $@;
            [[ $# -lt 1 ]] && return 1;
            :;
            : there are some, proceed;
            command declare -f $@ | fold_pipedots
        ;;
        *)
            debug D: $#, $@;
            command declare $@
        ;;
    esac
}
do_whf () 
{ 
    : fixed on date, eschewed the recursive call;
    : todo: explore effect of "date" in abstract;
    : date: 2020-05-01;
    : date: 2021-03-24;
    args=$*;
    for fun in $args;
    do
        set -- $(whf $fun);
        printf "%s\t%s\n" $fun "$*";
    done
}
doit () 
{ 
    : date: 2018-10-06;
    : date: 2022-03-17;
    debug $*;
    $@
}
dp_abstracts () 
{ 
    : write the Table for DP function ABSTRACTS;
    rdb_hdr name abstract;
    foreach abstract $(dp_all)
}
dp_all () 
{ 
    : all the functions in the DP family;
    : date: 2022-08-22;
    : date: 2022-09-10;
    ${*:-echo} dp dp_{root,version,all} dp_{abstracts,diff,example,funs,init,install} dp_{profs,test,tolibrary,utilities} dp_{cblock,compareall,functions,header,libraries} dp_{clear,restore,rmfunctions,qfile,wlhf{,_test}}
}
dp_cblock () 
{ 
    : collect the current Comment and Execution Blocks from ./.prof;
    : date: 2022-09-04;
    awk -v p=0 '$1 ~ /^false$/ { p = 1 }; p' ${1:-./.prof}
}
dp_clear () 
{ 
    : set up to clear functions from .prof, with a non-empty .prof.tmp;
    : date: 2022-09-08;
    : date: 2022-09-10;
    touch .prof.tmp;
    ls -alrt .prof*;
    comment dp_restore
}
dp_compareall () 
{ 
    : compare set vs family function lists;
    : anticipates the general case;
    : date: 2022-08-22;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    local all=${1}_all;
    local fam="$1 $(sfg ${1}_)";
    debug all: $all;
    debug fam: $fam;
    report_notfunction $all && return 1;
    :;
    $all | tpl | sort > .all;
    echo $fam | tpl | sort > .fam;
    comm .all .fam;
    printf "%s\t%s\t%s\n" .all .fam BOTH
}
dp_diff () 
{ 
    : diff LIB and ./.prof versions of functions;
    : lessons: ?? foreach was OK but Examine your TEST CASE, steady on DIFF ?;
    : date: 2022-08-22;
    : date: 2022-09-04;
    debug ENTRY $# $*;
    if_missingargs 2 $* && return;
    local lib=$(which $1);
    shift;
    debug LIB: $lib;
    for fun in $@;
    do
        debug FUN: $fun;
        fun_peek $fun ./.prof > .dotp;
        fun_peek $fun $lib > .dlib;
        diff .dlib .dotp || { 
            printf "RETURN $?\n< $lib\n$fun\t./.prof\n========\n\n\n"
        };
    done
}
dp_example () 
{ 
    : dotprof usage examples;
    : date: 2022-08-19;
    foreach dp_funs $(dp_profs) 1>&2;
    echo . . . .;
    foreach dp_funs $(dp_profs) | field 2 | sort -u;
    echo . . . .;
    declare -f $(myname)
}
dp_functions () 
{ 
    : collect the functions from ./.Prof;
    : date: 2022-09-04;
    awk -v p=0 '
        $1 ~ /^false$/  { p = 0 };
	$2 ~ /^[(][)]$/ { p = 1 };
	p
    ' ${1:-./.prof} | functions
}
dp_funs () 
{ 
    : list all function and their Dot Prof file;
    : date: 2022-07-30;
    : date: 2022-08-19;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    functions $1 | sed "s=$=	$1="
}
dp_header () 
{ 
    : collect the current Header Block from ./.prof;
    : date: 2022-09-04;
    awk -v p=1 '$2 ~ /^[(][)]$/ { exit }; p' ${1:-./.prof}
}
dp_hint () 
{ 
    : abstracts, key repair functions;
    : date: 2022-09-10;
    dp_abstracts | justify;
    ${*:-echo} dp_{clear,restore,rmfunctions}
}
dp_init () 
{ 
    : generic, have an "obsolete" member to take out the trash;
    : date: 2022-08-20;
    : date: 2022-09-10;
    isfunction dp_obsolete && dp_obsolete unset;
    : manufacture DP_ ROOT, VERSION functions, include names in ALL.;
    : todo: test both aspects, VARIABLE, and function;
    :;
    unset dp_{root,version};
    setget dp_root $HOME/dropbox/marty3/git/dp;
    setget dp_version 0.4.a
}
dp_install () 
{ 
    : move the run-time components into place;
    : versions are tracked in SRC, not in BIN, LIB;
    : date: 2022-08-20;
    : ------------------ two main components of an APPs BITMELD --;
    : date: 2022-08-27;
    : date: 2022-09-10;
    :;
    runfrom $(dp_root) || return;
    :;
    local bin=$(needir $(dp_root)/bin);
    local lib=$(needir $(dp_root)/lib);
    :;
    : ---------------------------------- manufacture the dp_app --;
    :;
    doit backup ./dplib ./dp_app;
    doit dp_utilities | cat - ./dplib | onlyChanged ./dp_app;
    :;
    : ------------------------- install just the APP in the BIN --;
    :;
    chmod 775 ./dp_app;
    doit ln -f ./dp_app $bin;
    :;
    : ------------------------------- install text files in LIB --;
    ln -f ./dot.prof $lib;
    :;
    : ------------------------------------------- all installed --;
    :;
    comment indir $(dp_root) find . -type file | egrep -v '\.(bak|git)/'
}
dp_libraries () 
{ 
    : collect function - home library pairs, default from .prof;
    : date: 2022-09-06;
    do_whf $(dp_functions ${1:-.prof})
}
dp_profs () 
{ 
    : list the active Dot-Profs;
    : date: 2022-07-30;
    : date: 2022-08-19;
    find $(home) -type f -name .prof | egrep -v '.(ver|bak)/'
}
dp_qfile () 
{ 
    : return the name of the FILE if the FUN is defined;
    : date: 2022-09-10;
    :;
    if_missingargs 2 $* && return;
    report_notfunction $1 && return 1;
    report_notfile $2 && return 2;
    :;
    awk -v patn="^$1$" '

        $1 ~ patn && $2 ~ /^[(][)]$/ { printf FILENAME; exit }

    ' "$2"
}
dp_restore () 
{ 
    : collect the ./.prof functions in these versions:;
    : .prof.fun -- the current function block;
    : .prof.tmp -- current less functions removed by rmfunctions;
    : .prof.nxt -- the reconstructed .prof;
    : related: dp_rmfunctions ./.prof.nxt into a .prof.tmp;
    : date: 2022-09-04;
    : date: 2022-09-10;
    :;
    function _do_restore () 
    { 
        dp_header;
        declare -f $(dp_functions) > ./.prof.fun;
        :;
        : ---------------- cat non-empty .prof.tmp or .prof.fun --;
        :;
        local suf=$( if_elseif ' -f ./.prof.tmp' .tmp .fun);
        cat .prof$suf;
        :;
        dp_cblock
    };
    _do_restore > ./.prof.nxt;
    chmod +x ./.prof.nxt;
    ls -lrt .prof{,.fun,.tmp,.nxt} 1>&2
}
dp_rmfunctions () 
{ 
    : remove the named function arguments from the collection;
    : update ./.prof.nxt;
    : date: 2022-09-04;
    : date: 2022-09-06;
    : date: 2022-09-10;
    if_missingargs 1 $* && return;
    local tmp=./.prof.tmp;
    set -- $(dp_functions | rm_these $*);
    case $# in 
        0)
            cat /dev/null > $tmp
        ;;
        *)
            declare -f $* | tee $tmp
        ;;
    esac
}
dp_test () 
{ 
    : home for DP testing, "it's shaping up in the FALSE block";
    : date: 2022-08-19;
    : date: 2022-08-20;
    : date: 2022-08-22;
    ${*:-echo} $(needir $(dp_root)/dp_test)
}
dp_tolibrary () 
{ 
    : write dot prof functions to their primary directory;
    : date: 2022-08-25;
    : date: 2022-09-06;
    local out=./funlib.out;
    for dir in $(
      do_whf $(dp_functions) | tee $out | nf gt 1 | field 2 | sort -u
      );
    do
        local lib=$(basename $dir);
        echo funslib $(grep $lib $out| field 1);
    done | tee .tolibrary.sh;
    comment source .tolibrary.sh
}
dp_utilities () 
{ 
    : functions used by dplib functions;
    : date: 2022-08-20;
    declare -f $(comm -23 <(app_fun $(functions dplib) 2> /dev/null) <( dp_all| tpl))
}
eachfunction () 
{ 
    : list everyfunction, including same function later in file, input;
    awk '$2 ~ /[(][)]/ { print $1 }' $*
}
field () 
{ 
    : date: 2017-05-11;
    : date: 2017-07-18;
    : date: 2022-08-19;
    awk "{ print \$$1 }"
}
fold_pipedots () 
{ 
    : RE folds line with PIPE followed by ... s;
    : the RE allows zero or more spaces after the Pipe Symbol;
    : .. a Dot followed by zero or more Dots or Spaces,;
    : .. closed by a space, which separates .s from the command;
    : also, fold --.arg arguments to a shell command;
    : related: multisymbol;
    : date: 2021-04-14;
    : date: 2021-05-22;
    : date: 2021-05-30;
    sed '
        s/| *\([.][. ]*\) /|\
    \1 /g; s/ \(--[a-zA-Z][a-zA-Z]*\)/ \\\
        \1/g'
}
for_nomar () 
{ 
    : continue executing first arg as command,;
    : until number of returned arguments is unchanged.;
    : date: 2016-11-10;
    : date: 2019-03-10 isolating the command saves ignoring it in the loop;
    : app_trace $*;
    : date: 2019-08-29;
    : date: 2022-06-09;
    local cmmd=$1;
    shift;
    : debug ENTRY cmmd: $cmmd, ARGS: $*;
    while true; do
        local num=$#;
        set $(args_uniq $* $($cmmd $*));
        debug While $CMMD "num: $num, $#";
        [[ $num -eq $# ]] && break;
    done;
    echo $*
}
foreach () 
{ 
    : ~ command arg ...;
    : executes COMMAND foreach arg ...;
    : date: 2017-05-12;
    : date: 2017-07-16;
    : date: 2019-10-28 QUOTE the ARG;
    : date: 2021-06-06 require ONLY 1 arg, go quietly if so;
    : date: 2021-06-12;
    : date: 2022-03-15;
    : date: 2022-03-20;
    : date: 2022-08-02;
    : date: 2022-08-19;
    debug ENTRY $# $1;
    local cmd="$1";
    shift;
    if_missingargs 1 $* && return 1;
    for arg in $@;
    do
        : debug RUN $cmd "$arg";
        $cmd "$arg";
    done
}
fun_asapp () 
{ 
    : smart family main function, checks to see if ARG is a sub-function;
    : usage: fun_asapp args ... And return;
    : date: 2022-04-09;
    debug ENTRY $# $*;
    [[ $# -lt 1 ]] && { 
        debug ZERO Args;
        return 1
    };
    local caller=$(myname 2);
    local subfun=$1;
    local famfun=${caller}_$subfun;
    debug famfun: $famfun;
    pause;
    isfunction $famfun && { 
        shift;
        fun_subuse $caller $subfun;
        debug FUNCTION famfun $famfun;
        $famfun $*;
        return
    };
    debug NOT a Function $famfun;
    sfg ${caller}_ 1>&2;
    return 2
}
fun_log () 
{ 
    : date: 2017-05-11;
    : date: 2019-04-09 added calling function log;
    : todo: reconcile fun{,ction}_log;
    : date: 2021-07-05;
    : date: 2021-07-16;
    : date: 2022-05-15;
    if_missingargs 1 $* && return 1;
    date "+%F-%T%t%a %b %d%t${*:2}%t$PWD" >> $1
}
fun_peek () 
{ 
    : date: 2022-08-22;
    :;
    local fun=$1;
    shift;
    local lib=${1:-$(which functionlib)};
    report_notfile $lib && return 1;
    debug fun: $fun;
    debug lib: $lib;
    :;
    cat $lib | awk -v fun=$fun '
    
      $1 ~ fun && $2 ~ /[(][)]/  { pr = 1 }
      pr                         { print  }
      $1 ~ /}/ && NF = 1         { pr = 0 }
   '
}
fun_subuse () 
{ 
    : log fun_asapp use, my main and sub_function;
    : date: 2022-05-15;
    local file=$(needir $(lib)/subuse/$1)/$2;
    debug file: $file;
    fun_log $file ${*:2}
}
func_args () 
{ 
    : use TYPE to simulate declare -f;
    : Thou Shalt NOT sort!;
    : date: 2021-03-09 much more explict TYPE -A test in AWK;
    : date: 2021-05-13;
    type -a ${@:-/dev/null} 2> /dev/null | awk '
        $2$3$4 ~ /isafunction/ && \
	$1 ~ /^[.a-zA-Z0-9][.a-zA-Z0-9_]*$/ { print $1 }
    '
}
func_get () 
{ 
    : update the list of libraries daily;
    : 2020-06-10 test for non-existent or EMPTY file, add SMART cat;
    : date: 2021-03-24 move data name to calling function;
    : date: 2022-01-02;
    : date: 2022-03-10;
    debug ENTRY A "$@";
    if_missingargs 1 "$*" && return 1;
    file="$1";
    shift;
    [[ -s "$file" ]] || { 
        debug CREATE $file;
        function_libs | sort > "$file"
    };
    modified_today "$file" || { 
        debug DAILY $file;
        function_libs | sort > "$file"
    };
    cat "$file"
}
funclocn () 
{ 
    : return location of all function libraries;
    : date: 2016-11-13;
    : date: 2018-02-15 all HOME .profiles;
    : date: 2021-03-24 -- Refresh with -r;
    : date: 2022-01-02;
    : date: 2022-03-17;
    :;
    debug A "$@";
    file=$(lib)/$(myname).txt;
    case $1 in 
        -r)
            rm -f "$file";
            debug R $(wc -l "$file")
        ;;
        -*)
            command declare -f funclocn;
            return
        ;;
    esac;
    debug file: $(wc -l "$file");
    func_get "$file"
}
function_libs () 
{ 
    : -------------------------- files named ...LIB in a /BIN directory --;
    :;
    find $(home) -type f -name '*[a-zA-Z]lib' 2> /dev/null | grep /bin/ | grep -v '/\.[a-z]'
}
functions () 
{ 
    : list functions ONCE in order of occurrence;
    : due to historical precendence;
    : lesson: time spent by not using PRINTFIRST,;
    eachfunction $* | awk '!p[$1]++'
}
funslib () 
{ 
    : save functions in a TBD library. try WHF;
    : usage: ~ funca ...;
    : relies on the fact that an unset LIBNAME defaults to FUNCTIONLIB;
    : date: 2018-12-01;
    : date: 2021-12-06;
    : date: 2022-04-09;
    : date: 2022-06-03;
    if_missingargs 1 $* && return 1;
    local libname=$(whf $1);
    : ${libname:=$(which functionlib)};
    debug libname: $libname;
    pause;
    libfuns ${libname} $*;
    lib_tidy ${libname}
}
home () 
{ 
    : moved to APP_HOME in users .profile, defaulting to HOME;
    : installed app users, e.g. todo, backup, should set APP_HOME;
    : date: 2022-04-09;
    : date: 2022-05-22;
    :;
    ${*:-echo} ${APP_HOME:=$HOME}
}
if_elseif () 
{ 
    : date: 2017-07-10;
    : date: 2017-07-18;
    case $# in 
        3)
            test $1 && echo $2 || echo $3
        ;;
        *)
            test $1 && echo $2 || { 
                shift 2;
                "$@"
            }
        ;;
    esac
}
if_missingargs () 
{ 
    : called N arg ..., displaying caller if insufficient argcount;
    : related: foreach;
    : date: 2021-01-03;
    : date: 2021-08-18;
    : date: 2022-04-29;
    : date: 2022-05-22;
    local shouldHave=$1;
    shift;
    debug "$#: $*";
    report_notargcount $shouldHave $# || return 1;
    : there were missing args;
    declare -f $(myname 2);
    return
}
indir () 
{ 
    : date: 2017-05-29;
    : date: 2018-10-09;
    : debug $*;
    : date: 2021-12-06;
    : date: 2022-05-03;
    : lesson: any PUSH, POP, CDX may leave nothing on STDOUT.;
    : date: 2022-05-07;
    report_notdirectory $1 && return 1;
    debug ENTRY $*;
    local dir=$1;
    shift;
    pushd $dir > /dev/null;
    debug EVAL $*;
    pause;
    eval ${@};
    pushd 1>&2 > /dev/null;
    cdx > /dev/null
}
isfunction () 
{ 
    : ~ function;
    : returns TRUTH of argument as FUNCTION;
    declare -f ${1:-/dev/null} > /dev/null
}
lib () 
{ 
    : a big fuss over ALT_HOME not in the ENVIRONMENT;
    : todo: see if we can eliminate its use in sh-bang;
    : app_trace home: $(home);
    : app_trace ALT_HOME: ${ALT_HOME};
    : date: 2022-02-21;
    : date: 2022-02-23;
    ${*:-echo} $(home)/lib
}
modified_today () 
{ 
    : was the FILE argument MODIFIED TODAY?;
    : date: 2020-01-05;
    : date: 2020-02-08;
    : date: 2021-05-15;
    : date: 2022-01-02;
    if_missingargs 1 $* && return;
    report_notfile $1 && return 1;
    function _modified_day () 
    { 
        set -- $(stat -t %d "$1");
        read_devtty mtime: ${10};
        echo ${10:1:2}
    };
    set -- $(_modified_day $1) $(date +%d);
    [[ $1 == $2 ]]
}
myname () 
{ 
    : e.g. myname "[n, default 1]";
    : returns name of caller OR callers caller ...;
    : date: 2018-02-16;
    : date: 2021-02-18 attempt to accomodate zsh;
    : date: 2022-04-29;
    echo ${FUNCNAME[${1:-1}]}
}
needir () 
{ 
    : date: 2017-05-29;
    : makes non-existent directory argument and returns name;
    : date: 2018-02-16;
    : date: 2020-03-04;
    : date: 2022-08-02;
    : date: 2022-08-13;
    report_notargcount 1 $# needed_directory && return 1;
    debug ENTRY $1;
    [[ -d "$1" ]] || mkdir -p "$1";
    echo "$1"
}
nf () 
{ 
    : date: 2017-05-11;
    : date: 2017-07-18;
    case $1 in 
        *awk)
            AWK=$1;
            shift
        ;;
        *)
            AWK=$( which gawk || which nawk || which awk )
        ;;
    esac;
    case $1 in 
        lt)
            $AWK "NF < ${2:-5}"
        ;;
        gt)
            $AWK "NF > ${2:-1}"
        ;;
        eq)
            $AWK "NF == ${2:-5}"
        ;;
        ne)
            $AWK "NF != ${2:-5}"
        ;;
        help)
            comment $0 "[lt|gt|eq|ne||* [NN]]"
        ;;
        "")
            $AWK NF
        ;;
        *)
            $AWK '{ print NF, $0}'
        ;;
    esac
}
onlyChanged () 
{ 
    : overwrites file arg if PIPEd data is different.;
    : date: 2017-05-12;
    : date: 2018-08-19;
    : date: 2021-02-06 use HOME/tmp;
    : date: 2021-03-24;
    : date: 2022-01-08;
    : date: 2022-08-02;
    report_notpipe && return 1;
    report_notargcount 1 $# && return 2;
    : TARGET, TMPfile;
    set $1 $(needir ~/tmp)/$(basename $1);
    cat - > $2;
    exists $1 || touch $1;
    cmp $1 $2 > /dev/null && rm -f $2 || mv $2 $1
}
pause () 
{ 
    return
}
rdb_hdr () 
{ 
    : date: 2017-05-12;
    : debug $*;
    : first the names, then equal-width dashes,;
    : with one or more, spaces to a single TAB;
    : date: 2022-05-29;
    ( echo $*;
    echo $* | tr 'a-zA-Z0-9_' '-' ) | sed 's/  */ /g' | tr ' ' '\t'
}
reading () 
{ 
    : date: 2021-02-21;
    : date: 2022-02-22;
    ${*:-echo} $(home)/git/applemcg.github.io/reading
}
report_notfile () 
{ 
    : date: 2018-02-16;
    : date: 2021-05-06;
    : date: 2021-12-24;
    : date: 2022-01-08;
    [[ -f $1 ]] && return 1;
    report_usage $1 "ISN'T" a file;
    declare -f $(myname 2) 1>&2
}
report_notfunction () 
{ 
    : returns: TRUE when 1st arg "ISN'T" a function,;
    : ... FALSE if it IS a function;
    : date: 2018-02-16;
    declare -f $1 > /dev/null && return 1;
    report_usage $1 "ISN'T" a function
}
report_notpipe () 
{ 
    : returns: TRUE when STDIN "ISN'T" a pipe;
    : ... FALSE if stdin is a pipe;
    : date: 2018-02-16;
    [[ -p /dev/stdin ]] && return 1;
    report_usage "ISN'T" reading a pipe
}
report_usage () 
{ 
    : writes: usage message of report_... caller FAILURE to STDERR;
    : date: 2018-03-30;
    : date: 2022-04-29;
    local caller=$(myname 3);
    : case $caller in;
    : diff_pair;
    : callStack;
    : read -p "HALT, use ctrl-C" < /dev/tty > /dev/tty;
    :;
    : esac;
    echo USAGE $caller: $* 1>&2
}
rm_these () 
{ 
    : grep -v succesive arguments on a pipe;
    : related: tiddlylink;
    if_missingargs 1 $* && return 1;
    case $# in 
        1)
            report_notpipe && return 1;
            grep -v $1
        ;;
        *)
            pipe_myargs $*
        ;;
    esac;
    return;
    comment $(myname) $1 PIPE $(myname) ${*:2}
}
runfrom () 
{ 
    : usage: ~ DIRECTORY function args OR return;
    : date: 2019-09-10;
    : date: 2020-02-04 simplify, test using indir;
    : read_devtty ENTERING: $PWD, $*;
    : date: 2020-09-21;
    : date: 2022-03-20;
    : date: 2022-05-07;
    : lesson: dont PAUSE in here, there are a few others, too;
    : date: 2022-05-14;
    debug ENTRY $*;
    local ldir=$(indir $1 pwd);
    debug testING PWD: $PWD, ldir: $ldir;
    [[ $PWD = $ldir ]] && return;
    debug HUNTING: $PWD, DIR: $1.;
    pushd $1 > /dev/null;
    shift;
    local cmd=$(myname 2);
    debug RUNNING: $PWD, cmd: $cmd, $#: $@;
    $cmd $@;
    debug HAVE RUN: $PWD, $#: $@;
    pushd > /dev/null;
    cdx 1>&2;
    debug CLEARED: $PWD, $#: $@;
    return 1
}
setenv () 
{ 
    : ~ NAME value ...;
    : exports NAME to the environment,;
    : set to value ...;
    : date: 2017-08-23;
    : date: 2018-02-16;
    [[ $# -lt 1 ]] && return;
    local na=$1;
    shift;
    eval $na=\"$*\";
    export $na
}
setget () 
{ 
    : SET or GET a value from a function CALL;
    : date: 2020-05-09;
    : date: 2022-09-08;
    :;
    : ~ name value -- defines NAME function returning VALUE;
    : ~ name -- defines NAME function with no value, but now settable;
    : date: 2018-10-19;
    debug ENTRY $# $*;
    report_isfunction $1 , unset $1 to reuse it && return 1;
    set $1 $(echo $1| tr a-z A-Z) "$2";
    debug A $*;
    local boiler=": mfg: $(myname 2);: date: 2022-09-08";
    debug boiler: $boiler;
    local param="$2:?";
    debug param: $param;
    local messg="echo \${$param}";
    debug messg: $messg;
    local desid="[[ \$# -ge 1 ]] && { setenv $2 \"\$1\"; }";
    debug desid: $desid;
    local whfun="$1 () { $boiler; $desid; $messg; }";
    debug whfun: "$whfun";
    eval "$whfun"
}
sfg () 
{ 
    : date: 2019-12-21 back to our roots, Set Functions Grep;
    : date: 2021-04-14;
    : date: 2022-08-02;
    set | functions | grep "${@:-.}"
}
tpl () 
{ 
    : returns STDIN or NAMEd files as a Token Per Line;
    : date: 2020-11-14;
    cat ${*:--} | tr -s ' \t' '\n'
}
whf () 
{ 
    : Which library Has the Function;
    : related: functions;
    : date: 2016-11-11;
    : date: 2017-07-16 supress localibs in funclocn -l;
    : date: 2020-09-30;
    : date: 2021-02-07 all internal, non _ function names;
    : date: 2021-03-24;
    : date: 2022-01-02;
    local flag="";
    case $1 in 
        -*)
            flag=-l;
            shift
        ;;
    esac;
    local arg=${1:-whf};
    : rbx A "$arg";
    funclocn $flag 2> /dev/null | while read file; do
        : rbx B "$file";
        awk -v patn="^$arg$" '
    	$1 ~ patn && $2 ~ /^[(][)]$/ && !p[FILENAME]++ { print FILENAME }
	' "$file";
    done
}
wpl () 
{ 
    : date: 2022-08-02;
    report_notpipe && return 1;
    tr -cs 'A-Za-z0-9_' '\n'
}
dp () 
{ 
    : do Dot Prof, backup and source;
    : a. backing up once/day, and;
    : b. either sourcing .prof or treating as an APP;
    : date: 2022-08-19;
    : date: 2022-09-10;
    local file=./.prof;
    local back=.bak/.prof;
    :;
    : ------------------------------- at first, a default .prof --;
    :;
    [[ -f $file ]] || cp $(dp_root)/lib/dot.prof $file;
    :;
    : --------------------------- at at minimum, a daily backup --;
    : i.e. users may choose more;
    :;
    isfunction backup 2> /dev/null && { 
        debug Time for a backup;
        [[ -f $back ]] || backup $file;
        modified_today $back || backup $file
    };
    set ${1:-$file};
    case $1 in 
        ./.prof)
            debug SOURCE $file;
            source $file
        ;;
        *)
            debug MAYBE an APP $*;
            fun_asapp $* && return
        ;;
    esac
}
dp_abstracts () 
{ 
    : write the Table for DP function ABSTRACTS;
    rdb_hdr name abstract;
    foreach abstract $(dp_all)
}
dp_all () 
{ 
    : all the functions in the DP family;
    : date: 2022-08-22;
    : date: 2022-09-10;
    ${*:-echo} dp dp_{root,version,all} dp_{abstracts,diff,example,funs,init,install} dp_{profs,test,tolibrary,utilities} dp_{cblock,compareall,functions,header,libraries} dp_{clear,restore,rmfunctions,qfile,wlhf{,_test}}
}
dp_example () 
{ 
    : dotprof usage examples;
    : date: 2022-08-19;
    foreach dp_funs $(dp_profs) 1>&2;
    echo . . . .;
    foreach dp_funs $(dp_profs) | field 2 | sort -u;
    echo . . . .;
    declare -f $(myname)
}
dp_funs () 
{ 
    : list all function and their Dot Prof file;
    : date: 2022-07-30;
    : date: 2022-08-19;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    functions $1 | sed "s=$=	$1="
}
dp_init () 
{ 
    : generic, have an "obsolete" member to take out the trash;
    : date: 2022-08-20;
    : date: 2022-09-10;
    isfunction dp_obsolete && dp_obsolete unset;
    : manufacture DP_ ROOT, VERSION functions, include names in ALL.;
    : todo: test both aspects, VARIABLE, and function;
    :;
    unset dp_{root,version};
    setget dp_root $HOME/dropbox/marty3/git/dp;
    setget dp_version 0.4.a
}
dp_install () 
{ 
    : move the run-time components into place;
    : versions are tracked in SRC, not in BIN, LIB;
    : date: 2022-08-20;
    : ------------------ two main components of an APPs BITMELD --;
    : date: 2022-08-27;
    : date: 2022-09-10;
    :;
    runfrom $(dp_root) || return;
    :;
    local bin=$(needir $(dp_root)/bin);
    local lib=$(needir $(dp_root)/lib);
    :;
    : ---------------------------------- manufacture the dp_app --;
    :;
    doit backup ./dplib ./dp_app;
    doit dp_utilities | cat - ./dplib | onlyChanged ./dp_app;
    :;
    : ------------------------- install just the APP in the BIN --;
    :;
    chmod 775 ./dp_app;
    doit ln -f ./dp_app $bin;
    :;
    : ------------------------------- install text files in LIB --;
    ln -f ./dot.prof $lib;
    :;
    : ------------------------------------------- all installed --;
    :;
    comment indir $(dp_root) find . -type file | egrep -v '\.(bak|git)/'
}
dp_profs () 
{ 
    : list the active Dot-Profs;
    : date: 2022-07-30;
    : date: 2022-08-19;
    find $(home) -type f -name .prof | egrep -v '.(ver|bak)/'
}
dp_root () 
{ 
    : mfg: dp_init;
    : date: 2022-09-08;
    [[ $# -ge 1 ]] && { 
        setenv DP_ROOT "$1"
    };
    echo ${DP_ROOT:?}
}
dp_test () 
{ 
    : home for DP testing, "it's shaping up in the FALSE block";
    : date: 2022-08-19;
    : date: 2022-08-20;
    : date: 2022-08-22;
    ${*:-echo} $(needir $(dp_root)/dp_test)
}
dp_utilities () 
{ 
    : functions used by dplib functions;
    : date: 2022-08-20;
    declare -f $(comm -23 <(app_fun $(functions dplib) 2> /dev/null) <( dp_all| tpl))
}
dp_version () 
{ 
    : mfg: dp_init;
    : date: 2022-09-08;
    [[ $# -ge 1 ]] && { 
        setenv DP_VERSION "$1"
    };
    echo ${DP_VERSION:?}
}
dp_diff () 
{ 
    : diff LIB and ./.prof versions of functions;
    : lessons: ?? foreach was OK but Examine your TEST CASE, steady on DIFF ?;
    : date: 2022-08-22;
    : date: 2022-09-04;
    debug ENTRY $# $*;
    if_missingargs 2 $* && return;
    local lib=$(which $1);
    shift;
    debug LIB: $lib;
    for fun in $@;
    do
        debug FUN: $fun;
        fun_peek $fun ./.prof > .dotp;
        fun_peek $fun $lib > .dlib;
        diff .dlib .dotp || { 
            printf "RETURN $?\n< $lib\n$fun\t./.prof\n========\n\n\n"
        };
    done
}
dp_tolibrary () 
{ 
    : write dot prof functions to their primary directory;
    : date: 2022-08-25;
    : date: 2022-09-06;
    local out=./funlib.out;
    for dir in $(
      do_whf $(dp_functions) | tee $out | nf gt 1 | field 2 | sort -u
      );
    do
        local lib=$(basename $dir);
        echo funslib $(grep $lib $out| field 1);
    done | tee .tolibrary.sh;
    comment source .tolibrary.sh
}
dp_compareall () 
{ 
    : compare set vs family function lists;
    : anticipates the general case;
    : date: 2022-08-22;
    : date: 2022-09-04;
    if_missingargs 1 $* && return;
    local all=${1}_all;
    local fam="$1 $(sfg ${1}_)";
    debug all: $all;
    debug fam: $fam;
    report_notfunction $all && return 1;
    :;
    $all | tpl | sort > .all;
    echo $fam | tpl | sort > .fam;
    comm .all .fam;
    printf "%s\t%s\t%s\n" .all .fam BOTH
}
dp_header () 
{ 
    : collect the current Header Block from ./.prof;
    : date: 2022-09-04;
    awk -v p=1 '$2 ~ /^[(][)]$/ { exit }; p' ${1:-./.prof}
}
dp_cblock () 
{ 
    : collect the current Comment and Execution Blocks from ./.prof;
    : date: 2022-09-04;
    awk -v p=0 '$1 ~ /^false$/ { p = 1 }; p' ${1:-./.prof}
}
dp_functions () 
{ 
    : collect the functions from ./.Prof;
    : date: 2022-09-04;
    awk -v p=0 '
        $1 ~ /^false$/  { p = 0 };
	$2 ~ /^[(][)]$/ { p = 1 };
	p
    ' ${1:-./.prof} | functions
}
dp_restore () 
{ 
    : collect the ./.prof functions in these versions:;
    : .prof.fun -- the current function block;
    : .prof.tmp -- current less functions removed by rmfunctions;
    : .prof.nxt -- the reconstructed .prof;
    : related: dp_rmfunctions ./.prof.nxt into a .prof.tmp;
    : date: 2022-09-04;
    : date: 2022-09-10;
    :;
    function _do_restore () 
    { 
        dp_header;
        declare -f $(dp_functions) > ./.prof.fun;
        :;
        : ---------------- cat non-empty .prof.tmp or .prof.fun --;
        :;
        local suf=$( if_elseif ' -f ./.prof.tmp' .tmp .fun);
        cat .prof$suf;
        :;
        dp_cblock
    };
    _do_restore > ./.prof.nxt;
    chmod +x ./.prof.nxt;
    ls -lrt .prof{,.fun,.tmp,.nxt} 1>&2
}
dp_rmfunctions () 
{ 
    : remove the named function arguments from the collection;
    : update ./.prof.nxt;
    : date: 2022-09-04;
    : date: 2022-09-06;
    : date: 2022-09-10;
    if_missingargs 1 $* && return;
    local tmp=./.prof.tmp;
    set -- $(dp_functions | rm_these $*);
    case $# in 
        0)
            cat /dev/null > $tmp
        ;;
        *)
            declare -f $* | tee $tmp
        ;;
    esac
}
dp_libraries () 
{ 
    : collect function - home library pairs, default from .prof;
    : date: 2022-09-06;
    do_whf $(dp_functions ${1:-.prof})
}
dp_clear () 
{ 
    : set up to clear functions from .prof, with a non-empty .prof.tmp;
    : date: 2022-09-08;
    : date: 2022-09-10;
    touch .prof.tmp;
    ls -alrt .prof*;
    comment dp_restore
}
dp_wlhf () 
{ 
    : Which Library Has the Function;
    : related: functions do_whf;
    : date: 2016-11-11;
    : date: 2020-09-30;
    : date: 2021-02-07 all internal, non _ function names;
    : date: 2022-01-02;
    : date: 2022-09-10;
    if_missingargs 1 $* && return;
    : FUNCTION tab file or empty;
    local fmt="%s\t%s\n";
    debug ENTRY $# $*;
    for fun in $*;
    do
        for file in $(funclocn);
        do
            local qfile=$(dp_qfile $fun $file);
            [[ -n $qfile ]] && { 
                printf $fmt $fun $qfile;
                break
            };
        done;
        printf $fmt $fun "";
    done | awk '!p[$1]++'
}
dp_qfile () 
{ 
    : return the name of the FILE if the FUN is defined;
    : date: 2022-09-10;
    :;
    if_missingargs 2 $* && return;
    report_notfunction $1 && return 1;
    report_notfile $2 && return 2;
    :;
    awk -v patn="^$1$" '

        $1 ~ patn && $2 ~ /^[(][)]$/ { printf FILENAME; exit }

    ' "$2"
}
dp_wlhf_test () 
{ 
    : good opportunity to use /RDB;
    : date: 2022-09-10;
    ( rdb_hdr name file;
    dp_wlhf backup $(sfg iso_);
    : ----------------------- ) | tee $(needir tmp)/wlhf.rdb | rowhas file ${1:-functionlib}
}
dp_hint () 
{ 
    : abstracts, key repair functions;
    : date: 2022-09-10;
    dp_abstracts | justify;
    ${*:-echo} dp_{clear,restore,rmfunctions}
}
eval dp_init 1>&2
