#+INCLUDE: ./orgheader.org
#+TITLE: Dot Prof Workflow

Functions, *local* and non-local are entered in the **.prof** file,
either new functions, or copies of existing functions which may need
to be modified.  In a source-controlled environment, the business here
is to return the all functions to their respective library, either a
local one under development or an existing library.

The workflow here supports the idea that an Application is a set of
functions, centered on a function library built to solve a specific
set of tasks.  The user functions are collected in this library; they
are supported by a heterogeneous group of functions, some or which are
general utilities, many of which may come from other specific
functional groups.  Specifically, in the case of the Dot Prof App,
**dp_app**, functions come from from a **backup** group and a
**report** group. These later supply the Versioning features at a high
level and the argument validation at a low level.

This, the Dot Prof App is being put forward first, since it's the
process which captures the workflow common to any such library 
development.

Since this development uses **Semantic Versioning**, see the
accompanying **Changelog** for additional steps in the workflow. This
workflow separates requirements Changelog or Semantic Versioning
features. The resulting function library and enclosing App may be used
without reference to those practices.

* Format of the Dot Prof file


The .prof file will have four sections in the order here:

- a header which may source libraries and perform initialization
- function bodies, new and those being repaired
- comments in a block wrapped in **false && { ... }** 
- the execution steps, which may be themselves commented 

See the Details of each section below, The Dot Prof Sections.

* Executing the Dot Prof


	dp   # or manually,
	source ./.prof
	
where the **dp** function also, one might say "gratuitously" backs up a
changed .prof file.

* Save .prof Functions in the Appropriate Library


Libraries are either local (under development) or non-local (existing
libraries on the PATH) are identified with this command which returns
function - library pairs.  A new function will not have a paired
library name.

     do_whf $(fdp)
	
Identify library names, for many functions:

    do_whf $(fdp) | field 2 | sort -u # noting individual libraries

** Functions with a library

	 For any libraries with a function or more

    set -- $(do_whf $(fdp) | field 2 | sort -u)
	echo $# $*  # Number, Names
	: 
	libfuns $(do_whf $(fdp) | grep $1) field 1)
	shift # repeat if necessary

***	New functions

For new .prof functions (not yet in a library) using the family name, i.e. dp_

	libfuns $(do_whf $(fdp) | grep ^dp_ |  field 1)
	
For new utility functions, not for the local lib

    libfuns $(which {UTILITY}lib) {fun}a {other}b ...
	
For the default library -- functionlib, a function with no home:

    : reset the function - library table
    do_whf $(fdp)

	: funslib function ...
	:
	funslib $(do_whf $(fdp) | field 1);	
	
* The Dot Prof Sections


These are from a current **.prof**

** the Header block

The header block, much as a users .profile, collects features from the user's
Environment, and sets variables particular to the development directory

    source functionlib 2> /dev/null
    source ./dp_app 2> /dev/null
    source ./dplib  2> /dev/null
    export USER_BACKUP_AREA=/git/
    export ALTERNATE_BACKUP_DIRS=".bak ../version"
	
The function libraries are "source"d from most to least general.

1. the **functionlib** is my function warehouse, general purpose
   functions, not in a family library. Though it's probably not
   necessary, sourcing it here is a useful precaution. It's possible
   some functions being updated in the Dot Prof may have their current
   version in the functionlib library.  
1. the **dp_app** contains all the functions from the **dplib**, and those
   from the functionlib used by the Dot Prof functions.  It is built during
   the installation process.   
1. the **dplib** is sourced after the companion APP since it updates functions
   in the app during the install process.   As a result the hierarchy of 
   operative function definitions being tested:
   1. **.prof** definition is preferred over one in **dplib**, or any other
   1. **dplib** definition is preferred over one in **dp_app**, or any other
   1. **dp_app** definition is preferred over one in **functionlib**.
   
Also, similar to the user's .profile, a few enviroment variables may be assigned
in the header block.  The usage here comes from my **backuplib**, documented in
[The Only Backup You'll Ever Need](http://mcgowans.org/pubs/marty3/commonplace/software/backupfunction.html "backup")


** Comment Block

The comment block, shielded by the **false** command has copies of
recent statements from the **execution** block

    false &&
    {
        dp_utilities | tee $(dp_utillib)
        dp_install
        which dputillib

        ls -lisart .prof $(find . -type f | usefulfiles)
        set -- fun_peek; $1 .prof  $1
        dp_diff ; comment missing args
        # lib_tidy ./dplib
        # def compare_all_lib
        #
        # 1). "compare_all_lib" doesn't belong here, it's now part of the process,
    }
	

** Execution Block	

This is why the Dot Prof workflow is useful. The objective is to unit
test the functions under development.

    # --------------------------------------------- EXECUTION BLOCK	--	
        # compare_all_lib
        # funslib $( do_whf $(fdp)| field 1)
        # 
        # backup_ver $(dp_version)
        dp_version backup_ver 
        # ver_diff .ver/0.{2,3}.0
        dp_install
		
The **execution** block may also have comments and likely have one or
more executable statements.  For example, if "compare_all_lib" needs
to be executed, simply delete the shell comment sharp (#).  This is
where the functions may be unit tested.

* Example Update


A sketchy list of steps for the next release. This assumes the
versioning in use here. To be fleshed out before version 1.0.0

1. qf **dp_version**; update to x.\(N+1\).a, read it into .prof
1. edit Changelog, to reflect version, making space for Unreleased
1. comment, ordered list "just a number", successive "1"s make sense
1. pick a function to add to .prof.  lets add **dp_app**, 0.4.x
  1. most affected function, **dp_install**, start there.
  1. idiom:   qf *functionname*, in editor, read .qf into buffer
  1. test dp_install here in the .prof
1. another function, dp_all
1. 
1. test
1. git ls-files, git status
1. add **fun_asapp** to **dp**, test


* Versioning

Not imposed by the DP tools, but use of **git** in a **Semantic Versioning**
environment.   Coordinating git versions with the Semantic Version is not
terribly challenging, but with the implementation I use, it may be necessary
to return some functions to the Dot Prof for re-work before the current 
version may be closed.

See the **Versioning** paper.

* Functions

1. qf

    qf () 
    { 
        : named show Quick Function ...;
        : date: 2019-08-11;
        : date: 2021-08-28;
        declare -f ${*:-qf} | tee .qf
    }

1. code_tomd

    code_tomd () 
    { 
        : prepare Functions for including in a Markdown;
        : date: 2022-08-29;
        declare -f $* | fourspaces | tee .qf | show_tmpclip
    }

1. compare_all_lib () 

    compare_all_lib () 
    { 
        : compare set vs lib function lists;
        : anticipates the general case;
        : date: 2022-08-22;
        local fam=${1:-dp};
        ${fam}_all | tpl > .all;
        functions ./${fam}lib | sort > .lib;
        comm $* .all .lib;
        printf "%s\t%s\t%s\n" .all .lib BOTH
    }








